from telegram import Update, WebAppInfo, MenuButtonWebApp, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import json
import logging

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
TOKEN = "8112562910:AAHXA_yu1OEB-JG3Lzdxje0g8-LWyprOslI"

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("‚û°Ô∏è –ö–æ–º–∞–Ω–¥–∞ /start")

    user_id = update.effective_user.id
    full_url = f"https://barber-webapp-git-main-adams-projects-62b06f32.vercel.app/?user_id={user_id}"

    keyboard = [
        [KeyboardButton("üíà –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", web_app=WebAppInfo(url=full_url))]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp
async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        data = json.loads(update.message.web_app_data.data)
        logger.info("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp")
        logger.info("üì¶ –î–∞–Ω–Ω—ã–µ: %s", data)

        services = data.get("services", [])
        services_text = "\n".join(f"‚Äî {s['title']} ({s['price']} ‚Ç∏)" for s in services) if services else "‚Äî"

        msg = (
            f"üôå –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!\n\n"
            f"üìÖ –î–∞—Ç–∞: {data.get('date', '‚Äî')} –≤ {data.get('time', '‚Äî')}\n"
            f"üë§ –ú–∞—Å—Ç–µ—Ä: {data.get('specialist', '‚Äî')}\n"
            f"üìç –§–∏–ª–∏–∞–ª: {data.get('branch', '‚Äî')}\n\n"
            f"üíº –£—Å–ª—É–≥–∏:\n{services_text}\n\n"
            f"üßë –ò–º—è: {data.get('name', '‚Äî')}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '‚Äî')}\n"
            f"‚úâÔ∏è Email: {data.get('email', '‚Äî')}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment', '‚Äî')}"
        )

        await update.message.reply_text(msg)

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö WebApp: %s", e)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏ üòû")

# –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é
async def setup_menu(app):
    await app.bot.set_chat_menu_button(
        menu_button=MenuButtonWebApp(
            text="üíà –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
            web_app=WebAppInfo(
                url=f"https://barber-webapp-git-main-adams-projects-62b06f32.vercel.app/?user_id={{user_id}}"
            )
        )
    )

    logger.info("‚úÖ –ú–µ–Ω—é WebApp —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))
    app.post_init = setup_menu
    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—ë–º —Å–æ–±—ã—Ç–∏—è...")
    app.run_polling()

if __name__ == "__main__":
    main()