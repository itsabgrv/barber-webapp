from telegram import Update, WebAppInfo, MenuButtonWebApp
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import json

TOKEN = "8112562910:AAHXA_yu1OEB-JG3Lzdxje0g8-LWyprOslI"


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è' –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.")


async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print("üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp:")
    print("‚û°Ô∏è update.message:", update.message)
    print("‚û°Ô∏è update.message.web_app_data:", update.message.web_app_data)

    try:
        if update.message.web_app_data:
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp")
            data = json.loads(update.message.web_app_data.data)
            print("üì¶ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", data)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
            services = data.get("services", [])
            services_text = "\n".join(f"‚Äî {s['title']} ({s['price']} ‚Ç∏)" for s in services) if services else "‚Äî"

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = (
                f"üôå –í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!\n\n"
                f"üìÖ –î–∞—Ç–∞: {data.get('date', '‚Äî')} –≤ {data.get('time', '‚Äî')}\n"
                f"üë§ –ú–∞—Å—Ç–µ—Ä: {data.get('specialist', '‚Äî')}\n"
                f"üìç –§–∏–ª–∏–∞–ª: {data.get('branch', '‚Äî')}\n\n"
                f"üíº –£—Å–ª—É–≥–∏:\n{services_text}\n\n"
                f"üßë –ò–º—è: {data.get('name', '‚Äî')}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone', '‚Äî')}\n"
                f"‚úâÔ∏è Email: {data.get('email', '‚Äî')}\n"
                f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {data.get('comment', '‚Äî')}"
            )

            await context.bot.send_message(chat_id=update.effective_chat.id, text=msg)
        else:
            print("‚ùå web_app_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e)
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö üòû")


async def setup_menu(app):
    await app.bot.set_chat_menu_button(
        menu_button=MenuButtonWebApp(
            text="üíà –ó–∞–ø–∏—Å–∞—Ç—å—Å—è",
            web_app=WebAppInfo(url="https://barber-webapp-git-main-adams-projects-62b06f32.vercel.app")
        )
    )


def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))

    # üõ†Ô∏è –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö
    app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handle_webapp_data))

    app.post_init = setup_menu
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
